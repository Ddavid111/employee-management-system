@startuml
' ====== Alap osztály ======
class Person {
  - name : String
  - age : int
  + Person(name:String, age:int)
  + Person()
  + getName() : String
  + setName(name:String) : void
  + getAge() : int
  + setAge(age:int) : void
  + toString() : String
}

' ====== Employee és leszármazottai ======
class Employee {
  - workplace : String
  - salary : int
  + Employee(name:String, age:int, workplace:String, salary:int)
  + Employee()
  + getWorkplace() : String
  + setWorkplace(workplace:String) : void
  + getSalary() : int
  + setSalary(salary:int) : void
  + toString() : String
}

class ITEmployee {
  - position : ITPosition
  - project : String
  - baseSalary : int
  + ITEmployee(name:String, age:int, workplace:String, position:ITPosition, project:String)
  + ITEmployee()
  + getProject() : String
  + setProject(project:String) : void
  + getPosition() : ITPosition
  + setPosition(position:ITPosition) : void
  + getBaseSalary() : int
  + setBaseSalary(baseSalary:int) : void
  + toString() : String
}

class UniEmployee {
  - position : UniPosition
  - baseSalary : int
  + UniEmployee(name:String, age:int, workplace:String, position:UniPosition)
  + UniEmployee()
  + getPosition() : UniPosition
  + setPosition(position:UniPosition) : void
  + getBaseSalary() : int
  + setBaseSalary(baseSalary:int) : void
  + toString() : String
}

' ====== Enum típusok ======
enum ITPosition {
  INTERN
  JUNIOR
  MEDIOR
  SENIOR
  MANAGER
}

enum UniPosition {
  PROF
  LECTURER
  ADMIN
}

Person <|-- Employee
Employee <|-- ITEmployee
Employee <|-- UniEmployee
ITEmployee --> ITPosition
UniEmployee --> UniPosition

' ====== Factory Pattern ======
interface EmployeeFactory {
  + createEmployee(workplace:String) : Employee
}

class EmployeeFactoryImpl {
  + createEmployee(workplace:String) : Employee
}

EmployeeFactory <|.. EmployeeFactoryImpl
EmployeeFactoryImpl ..> Employee

' ====== FileService + Implementáció ======
interface FileService<T> {
  + writeToFile(filename:String, employees:List<T>) : void
  + readFromFile(filename:String) : List<T>
}

class EmployeeFileService {
  + writeToFile(filename:String, employees:List<Employee>) : void
  + readFromFile(filename:String) : List<Employee>
}

FileService <|.. EmployeeFileService
EmployeeFileService --> Employee

' ====== Iterator Pattern ======
interface ListIterator<T> {
  + getNextElement() : T
  + getCurrentElement() : T
  + hasMoreElement() : boolean
  + resetIterator() : void
}

class EmployeeIterator {
  - employeeList : List<Employee>
  - index : int
  + EmployeeIterator(employeeList:List<Employee>)
  + getNextElement() : Employee
  + getCurrentElement() : Employee
  + hasMoreElement() : boolean
  + resetIterator() : void
}

ListIterator <|.. EmployeeIterator
EmployeeIterator --> Employee

' ====== Főprogram ======
class App {
  - uniEmployeeList : List<Employee>
  - itEmployeeList : List<Employee>
  + main(args:String[]) : void
  + init() : void
  + end() : void
}

App --> EmployeeFileService
App --> EmployeeIterator
App --> EmployeeFactoryImpl
App --> Employee
@enduml